Approach: Think of it as: 
1) first find the base case.
2) try to think how will you be able to use this base case while incrementing or decrementing n.
3) Identify the pattern.
4) think that i have to reach to the base case somehow. How? Try to get part of the solution for n and delegate the responsibility
to the subsequent calls by passing the value (n-1) or (n+1) depending on the case. This way, the problem is getting broken down into
small pieces, BUT you are not adding these pieces until you start retracting.

5) In difficult conditions when you have to think more than 1 idea, think of applying the 2nd idea to further break the problem down
and make sure to call the function again to continue the flow of the program. When continuing, try to recurse in a way that
gels with the 1st recursive function.
eg: 
	public String changePi(String str) {
  if(str.length() < 2) return str;
		 if(str.startsWith("pi")) {
			return "3.14" + changePi(str.substring(2));
		 }
		 if(str.length() == 2 && !str.equals("pi")) return str;
		 
		 return changePi(str.substring(0,1)) + 
				 changePi(str.substring(1));
}

Important notes:

1) simply keep on returning after each condition check. There is no way we can store something in the middle of recursive calls
and use it later. If you feel you are stuck going -> way, try to come from the other direction <- like that.
Finest example: parenBit example in 'CountNumber8' in Misc.

2) DO THE SMALL AMOUNT OF WORK THAT YOUR RECURSIVE CASE WAS SET OUT TO DO, THEN PLAN ON STITCHING EVERYTHING TOGETHER.
eg: if you are planning to crawl directory structures and print out files in each dir, first crawl through the dirs
and when you do that, function recursively goes thru each dir and stores file names in the stack. then while backtracking
i.e. returning values, we can start printing.
understanding: crawl first, print later.
crawl(dir) <- recursion
cout << filename << endl; <- stitching together. 

	
-----------------------------------
eg: Bunnies, odd bunny = 2 ears, even bunny = 3 ears. Find total number of ears for all bunnies put together in a line.
You don't need to know how many bunnies will be passed. Let it be n number of bunnies.....
Think of it as: 
if n was even: do -> Solution of (n-1) + 3
if n was odd: do -> Solution of (n-1) + 2;
then find the solution of n-1 that will lead to n-2, n-3, n-4.... and so on... eventually we will hit the base case.
Once the base case is hit, the execution will retract back from 1 to 2 to 3 to 4... up to n.
In the process of retracting, it will keep on doing additions.


Q: Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) ... 1. Compute the result recursively (without loops).

Answer:

public int factorial(int n) {
  if(n==1) return 1;
  return n*factorial(n-1);
}

Q: We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication).


bunnyEars(0) → 0
bunnyEars(1) → 2
bunnyEars(2) → 4

Answer:

public int bunnyEars(int bunnies) {
  if(bunnies == 0) return 0;
  if(bunnies == 1) return 2;
  return bunnyEars(bunnies - 1) + 2;
}

Q: The fibonacci sequence is a famous bit of mathematics, and it happens to have a recursive definition. The first two values in the sequence are 0 and 1 (essentially 2 base cases). Each subsequent value is the sum of the previous two values, so the whole sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on. Define a recursive fibonacci(n) method that returns the nth fibonacci number, with n=0 representing the start of the sequence.


fibonacci(0) → 0
fibonacci(1) → 1
fibonacci(2) → 1

Answer:

public int fibonacci(int n) {
  if(n == 0) return 0;
  if(n == 1) return 1;
  return fibonacci(n-1) + fibonacci(n-2);
}

Q: We have bunnies standing in a line, numbered 1, 2, ... The odd bunnies (1, 3, ..) have the normal 2 ears. The even bunnies (2, 4, ..) we'll say have 3 ears, because they each have a raised foot. Recursively return the number of "ears" in the bunny line 1, 2, ... n (without loops or multiplication).


bunnyEars2(0) → 0
bunnyEars2(1) → 2
bunnyEars2(2) → 5

Answer: 

public int bunnyEars2(int n) {
  if(n == 0) return 0;
  if(n % 2 == 0) return bunnyEars2(n-1) + 3;
  else return bunnyEars2(n-1) + 2; 
}

Q: We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows.


triangle(0) → 0
triangle(1) → 1
triangle(2) → 3

Answer:

public int triangle(int n) {
  if(n == 0) return 0;
  if(n == 1) return 1;
  return n + triangle(n-1);
}

Q: Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).


sumDigits(126) → 9
sumDigits(49) → 13
sumDigits(12) → 3

Answer:

public int sumDigits(int n) {
  if(n / 10 == 0) return n %10;
  
  return n%10 + sumDigits(n/10);
}


Q: 
Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).


count7(717) → 2
count7(7) → 1
count7(123) → 0

Answer:

public int count7(int n) {

if(n / 10 == 0) {
  if(n == 7) 
    return 1;
  else 
    return 0;
} else {
  return count7(n % 10) + count7(n/10);
}

}

Q: 
Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4. Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).


count8(8) → 1
count8(818) → 2
count8(8818) → 4

Answer:

public int count8(int n) {
		if(n / 10 == 0) {
			if(n == 8) return 1;
			else return 0;
		} else {
			if(n % 10 == 8 && n / 10 == 8)
				return (count8(n%10) + 2*count8(n/10));
			else 
				return count8(n%10) + count8(n/10);
		}
	}

count8(8) → 1			1	OK	
count8(818) → 2			2	OK	
count8(8818) → 4		4	OK	
count8(8088) → 4		3	X	
count8(123) → 	0		0	OK	
count8(81238) → 2		2	OK	
count8(88788) → 6		5	X	
count8(8234) → 1		1	OK	
count8(2348) → 1		1	OK	
count8(23884) → 3		2	X	
count8(0) → 0			0	OK	
count8(1818188) → 5		4	X	
count8(8818181) → 5		5	OK	
count8(1080) → 1		1	OK	
count8(188) → 3			2	X	
count8(88888) → 9		6	X	
count8(9898) → 2		2	OK	
count8(78) → 1			1	OK	


Q: Given base and n that are both 1 or more, compute recursively (no loops) the value of base to the n power, so powerN(3, 2) is 9 (3 squared).


powerN(3, 1) → 3
powerN(3, 2) → 9
powerN(3, 3) → 27

Answer:

public int powerN(int base, int n) {
  if(n == 1) return base;
  
  return base * powerN(base, n-1);
}


